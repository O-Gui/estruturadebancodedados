#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

#define VERDADEIRO 1
#define FALSO 0

struct dados{
   int idade;
   int peso;
};

typedef struct dados dados;


void swap (dados **A, dados **B);
int particao(dados **vetor, int inf, int sup);
void quicksort(dados **vetor, int inf, int sup);
int comparar (dados **A, dados **B);

int main(){
system("cls");
dados D1 = {25, 50};
dados D2 = {20, 30};
dados D3 = {30, 40};
dados D4 = {20, 65};
dados D5 = {20, 40};
dados D6 = {18, 65};
dados D7 = {30, 45};
dados D8 = {18, 60};
dados D9 = {41, 90};

//criar um vetor de endercos de memoria para dados

dados *x[]={&D1, &D2, &D3, &D4, &D5, &D6, &D7, &D8, &D9};
int n = sizeof(x)/sizeof(x[0]);
quicksort(x, 0, n-1);
 for(int i=0; i < n; i++) 
 printf("{%d,%d}", x[i]->idade, x[i]->peso);

return 0;

}


void swap (dados **A, dados **B){
     dados *temp = *A;
     *A = *B;
     *B = temp;
}

int particao(dados **vetor, int inf, int sup){
    dados *pivor = vetor[(inf + sup) /2];
    int i = inf;
    int j = sup;
    while (i <= j){
        while (comparar(&vetor[i], &pivor)< 0) i++;
        while (comparar(&vetor[j], &pivor)< 0) j--;
        if( i <= j){
            swap(&vetor[i], &vetor[j]);
            i++;
            j--;
        }
        
    }
   return i;  //posicao do pivor 
}

void quicksort(dados **vetor, int inf, int sup){
    if(inf < sup){
        int p = particao(vetor, inf, sup);
        quicksort(vetor, inf, p-1);
        quicksort(vetor, p, sup);
    }

}

int comparar (dados **A, dados **B){
       dados *x = *A;
       dados *y = *B;
       int DeltaIdade = x -> idade - y ->idade;
       int DeltaPeso = x -> peso - y ->peso;
       if (x->idade != y->idade) return DeltaIdade; else return DeltaPeso;
}
